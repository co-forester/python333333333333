from typing import Callable, List, Tuple

#1)написати функцію на замикання котра буде в собі зберігати список справ,
#вам потрібно реалізувати два методи:
#- перший записує в список нову справу
#- другий повертає всі записи
def create_todo_list():
    todo_list = []

    def add_task():
        todo = input('впишіть нагадування: ')
        todo_list.append(todo)

    def get_tasks():
        return todo_list

    return add_task, get_tasks

# Приклад:
add_task, get_tasks = create_todo_list()

while True:
    print('щоб додати завдання натисніть 1')
    print('щоб вивести список завдань натисніть 2')
    print('якщо бажаєте закінчити натисніть 6 ')

    choice = input(" Зроби свій вибір: ")

    if choice == '1':
        add_task()
    elif choice == '2':
        print("Список справ:", get_tasks())
    elif choice == '6':
        break

# 2) протипізувати перше завдання
def create_todo_list02() -> Tuple[Callable[[str], None], Callable[[], List[str]]]:
    todo_list: List[str] = []

    def add_todo(todo: str) -> None:
        todo_list.append(todo)

    def get_all() -> List[str]:
        return todo_list

    return add_todo, get_all

# Приклад:
add_todo, get_all = create_todo_list02()

add_todo("Поцілувати Оксану")
add_todo("Поцілувати Дашу")
add_todo("Вивчити python")
add_todo("Відпочити")

print("Список справ:", get_all())

# 3) створити функцію котра буде повертати сумму розрядів числа у вигляді строки
# (також використовуемо типізацію)
def expanded_form(number: int) -> str:
    num_str = str(number)
    result = []

    for i, digit in enumerate(num_str):  # ітератор
        if digit != '0':
            result.append(digit + '0' * (len(num_str) - i - 1))

    return ' + '.join(result)

# Приклад:
print(expanded_form(12))    # Виводить: '10 + 2'
print(expanded_form(42))    # Виводить: '40 + 2'
print(expanded_form(70304))  # Виводить: '70000 + 300 + 4'

# 4) створити декоратор котрий буде підраховувати скільки разів була запущена функція,
# продекорована цим декоратором, та буде виводити це значення після виконання функцій
def count_calls(func):
    def wrapper(*args, **kwargs):
        wrapper.calls += 1
        result = func(*args, **kwargs)

        #print("Функція була викликана", wrapper.calls, "разів")
        print(f"Функція '{func.__name__}' була викликана {wrapper.calls} разів")  # форматування рядка

        return result
    wrapper.calls = 0
    return wrapper

# Приклад:
@count_calls
def greet(name):

    #print("Привіт,", name, "!")
    print(f"Привіт, {name}!")  # форматування рядка

greet("Оксана")
greet("Сергій")
greet("Данііл")
#*********************************************************************************************************************
"""
Метод	            Опис

capitalize()	    Перша літера рядка переводиться в верхній регістр, а решта - в нижній.
casefold()	        Перетворює рядок до нижнього регістру, а також робить його "fold" для порівняння.
center(width)	    Повертає рядок вирівняним по центру в полі ширини width.
count(substring)	Повертає кількість входжень підстрічки substring у рядок.
encode(encoding)	Повертає закодовану версію рядка зазначеним кодуванням.
endswith(suffix)	Перевіряє, чи закінчується рядок на вказану підстрічку suffix.
expandtabs(tabsize)	Замінює табуляції у рядку пробілами, використовуючи розмір табуляції tabsize.
find(substring)	    Повертає індекс першого входження підстрічки substring у рядок, або -1, якщо відсутня.
format()	        Форматує рядок за допомогою переданих аргументів.
index(substring)	Повертає індекс першого входження підстрічки substring у рядок, або генерує виняток ValueError, якщо відсутня.
isalnum()	        Повертає True, якщо всі символи у рядку або не відділені роздільниками.
isalpha()	        Повертає True, якщо всі символи у рядку - літери.
isascii()	        Повертає True, якщо всі символи у рядку відповідають ASCII.
isdecimal()	        Повертає True, якщо всі символи у рядку - десяткові цифри.
isdigit()	        Повертає True, якщо всі символи у рядку - цифри.
isidentifier()	    Повертає True, якщо рядок є допустимим ідентифікатором Python.
islower()	        Повертає True, якщо всі символи у рядку в нижньому регістрі.
isnumeric()	        Повертає True, якщо всі символи у рядку - числові.
isprintable()	    Повертає True, якщо всі символи у рядку можна надрукувати.
isspace()	        Повертає True, якщо всі символи у рядку - пробільні.
istitle()	        Повертає True, якщо рядок відповідає формату заголовку.
isupper()	        Повертає True, якщо всі символи у рядку у верхньому регістрі.
join(iterable)	    Об'єднує елементи послідовності iterable в один рядок, розділені поточним рядком.
ljust(width)	    Повертає рядок вирівняним по лівому краю в полі ширини width.
lower()	            Перетворює всі символи у рядку до нижнього регістру.
lstrip()	        Видаляє всі пробіли та пробільні символи з лівого краю рядка.
partition(separator)	Розбиває рядок на трикадрову кортеж, розділяючи за першим входженням роздільника separator.
replace(old, new)	Замінює всі входження підстрічки old на new.
rfind(substring)	Повертає найбільший індекс входження підстрічки substring у рядок, або -1, якщо відсутня.
rindex(substring)	Повертає найбільший індекс входження підстрічки substring у рядок, або генерує виняток ValueError, якщо відсутня.
rjust(width)	    Повертає рядок вирівняним по правому краю в полі ширини width.
rpartition(separator)	Розбиває рядок на трикадрову кортеж, розділяючи за останнім входженням роздільника separator.
rsplit(separator)	Розбиває рядок
"""
#*********************************************************************************************************************
"""
методів рядків за цими категоріями:

Категорія	    Методи

Редагування	    capitalize(), casefold(), center(), expandtabs(), ljust(), lower(), lstrip(), replace(),
                rjust(), rstrip(), strip(), swapcase(), title(), upper(), zfill()
                
Пошук	        count(), endswith(), startswith(), find(), index(), rfind(), rindex()

Порівняння	    isalnum(), isalpha(), isascii(), isdecimal(), isdigit(), isidentifier(), islower(), 
                isnumeric(), isprintable(), isspace(), istitle(), isupper()
                
Перетворення	encode(), join(), partition(), split(), rsplit(), rpartition(), splitlines()

Форматування	format(), format_map()

Регістр	        capitalize(), casefold(), lower(), swapcase(), title(), upper()

Заміна	        replace()

Вирівнювання	center(), ljust(), rjust()

Розділення	    partition(), split(), rsplit(), splitlines()

З'єднання	    join()

Перевірка	    endswith(), startswith(), isalnum(), isalpha(), isascii(), isdecimal(), isdigit(),
                isidentifier(), islower(), isnumeric(), isprintable(), isspace(), istitle(), isupper()
                
Інше	        expandtabs(), strip(), lstrip(), rstrip(), zfill()
"""
#*********************************************************************************************************************
"""
Ось таблиця методів списків разом з прикладами та поясненнями:

Метод	    Приклад	                    Пояснення

append()	my_list.append(5)	        Додає новий елемент у кінець списку.
clear()	    my_list.clear()	            Видаляє всі елементи зі списку.
copy()	    new_list = my_list.copy()	Повертає копію списку.
count()	    my_list.count(5)	        Повертає кількість входжень заданого значення у списку.
extend()	my_list.extend([6, 7, 8])	Додає елементи з іншого списку (або будь-якої ітерабельної послідовності) до кінця поточного списку.
index() 	my_list.index(5)	        Повертає індекс першого входження заданого значення у списку.
insert()	my_list.insert(2, 'a')	    Вставляє елемент у задане місце списку.
pop()	    my_list.pop()	            Видаляє та повертає елемент за вказаним індексом (або останній елемент, якщо індекс не вказаний).
remove()	my_list.remove(5)	        Видаляє перше входження заданого значення зі списку.
reverse()	my_list.reverse()	        Розвертає список на місці.
sort()	    my_list.sort()	            Сортує елементи списку у місці.
Це лише деякі з найбільш поширених методів списків у Python, які можна використовувати для додавання, видалення, зміни та роботи з елементами списку.
"""
#*********************************************************************************************************************
"""
Метод	            Приклад	                    Пояснення

append()	        my_list.append(5)	        Додає новий елемент у кінець списку.
clear()	            my_list.clear()	            Видаляє всі елементи зі списку.
copy()	            new_list = my_list.copy()	Повертає копію списку.
count()	            my_list.count(5)	        Повертає кількість входжень заданого значення у списку.
extend()	        my_list.extend([6, 7, 8])	Додає елементи з іншого списку (або будь-якої ітерабельної 
                                                    послідовності) до кінця поточного списку.
index()	            my_list.index(5)	        Повертає індекс першого входження заданого значення у списку.
insert()	        my_list.insert(2, 'a')	    Вставляє елемент у задане місце списку.
pop()	            my_list.pop()	            Видаляє та повертає елемент за вказаним індексом (або останній елемент,
                                                    якщо індекс не вказаний).
remove()	        my_list.remove(5)	        Видаляє перше входження заданого значення зі списку.
reverse()	        my_list.reverse()	        Розвертає список на місці.
sort()	            my_list.sort()	            Сортує елементи списку у місці.
copy()	            new_list = my_list.copy()	Створює та повертає копію списку.
index()	            my_list.index(3)	        Повертає індекс першого входження заданого значення у списку. Якщо 
                                                    значення не знайдено, видає ValueError.
clear()	            my_list.clear()	            Видаляє всі елементи зі списку.
reverse()	        my_list.reverse()	        Розвертає список на місці.
remove()	        my_list.remove(5)	        Видаляє перше входження заданого значення зі списку. Якщо значення не 
                                                    знайдено, видає ValueError.
insert()	        my_list.insert(2, 'a')	    Вставляє задане значення у задане місце у списку.
pop()	            my_list.pop()	            Видаляє та повертає елемент за заданим індексом. Якщо індекс не 
                                                    вказаний, видає та повертає останній елемент.
extend()	        my_list.extend([6, 7, 8])	Розширює список, додаючи елементи з іншого списку (або будь-якої 
                                                    ітерабельної послідовності) до кінця поточного.
sort(reverse=True)	my_list.sort(reverse=True)	Сортує елементи списку у зворотньому порядку.
"""
#*********************************************************************************************************************
"""
Метод	    Приклад	                Пояснення

count()	    my_tuple.count(5)	    Повертає кількість входжень заданого значення у кортеж.
index()	    my_tuple.index(5)	    Повертає індекс першого входження заданого значення у кортеж.

Кортежі у Python є незмінними послідовностями, тому вони мають лише методи, які забезпечують доступ до елементів та 
надають інформацію про кортеж. Метод count() дозволяє підрахувати кількість входжень певного значення у кортежі, 
а метод index() знаходить і повертає індекс першого входження заданого значення у кортежі.
"""
#*********************************************************************************************************************
"""
Метод	        Приклад	                                    Пояснення

clear()	        my_dict.clear()	                            Видаляє всі елементи словника.
copy()	        new_dict = my_dict.copy()	                Повертає копію словника.
fromkeys()	    new_dict = dict.fromkeys(keys, value)	    Повертає новий словник, в якому ключі - елементи keys, 
                                                                а значення - value.
get()	        value = my_dict.get(key)	                Повертає значення, що відповідає заданому ключу, або None,
                                                                якщо ключа немає у словнику.
items()	        items = my_dict.items()	                    Повертає список кортежів (ключ, значення) для кожної пари 
                                                                ключ-значення у словнику.
keys()	        keys = my_dict.keys()	                    Повертає список ключів у словнику.
pop()	        value = my_dict.pop(key)	                Видаляє та повертає значення, що відповідає заданому ключу.
                                                                Якщо ключа немає, генерує виняток KeyError або повертає 
                                                                default.
popitem()	    key, value = my_dict.popitem()	            Видаляє та повертає випадкову пару ключ-значення.
setdefault()	value = my_dict.setdefault(key, default)	Повертає значення, що відповідає заданому ключу. Якщо ключа
                                                                немає, додає його з значенням default.
update()	    my_dict.update(other_dict)	                Оновлює словник, додавши пари ключ-значення з іншого 
                                                                словника other_dict.
values()	    values = my_dict.values()	                Повертає список значень у словнику.
"""

av = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
bv = {'a': 11, 'b': 22, 'c': 33, 'd': 44, 'e': 55}
cv = {'a': 111, 'b': 222, 'c': 333, 'd': 444, 'e': 555}
print(av)
print(bv)
print(cv)
print('av|bv = ', av|bv)
print('bv|av = ', bv|av)
av |= bv
print(av)
av |= cv
print(av)
"""
Метод intersection() використовується для знаходження перетину (спільних елементів) між двома або більше множинами 
(або іншими ітерабельними об'єктами) у Python. Він повертає новий об'єкт, який містить лише ті елементи, які 
знаходяться в обох (або всіх) множинах.

Приклад використання методу intersection():

set1 = {1, 2, 3, 4, 5}
set2 = {4, 5, 6, 7, 8}

intersection_set = set1.intersection(set2)

print(intersection_set)  # Виведе: {4, 5}

У цьому прикладі метод intersection() використовується для знаходження перетину між множинами set1 та set2. 
Результатом є нова множина, що містить лише спільні елементи обох множин, тобто {4, 5}.
"""
"""
Метод difference() використовується для знаходження різниці між двома множинами (або іншими
 ітерабельними об'єктами) у Python. Він повертає новий об'єкт, який містить елементи першої множини, 
 які не зустрічаються в другій множині.

Приклад використання методу difference():

python
Copy code
set1 = {1, 2, 3, 4, 5}
set2 = {4, 5, 6, 7, 8}

difference_set = set1.difference(set2)

print(difference_set)  # Виведе: {1, 2, 3}

У цьому прикладі метод difference() використовується для знаходження різниці між множинами set1 та set2.
 Результатом є нова множина, яка містить елементи з множини set1, які не зустрічаються в множині set2, тобто {1, 2, 3}.
"""










